play_game1 <- function() {
  win_amount = sample(c(1, -1),
                      1,
                      replace = TRUE,
                      prob = c(18 / 37, 19 / 37))
  
  #In game 1 the number of bets are constant for each game i.e 1
  
  number_of_bet <- 1
  
  return (c(win_amount, number_of_bet))
  
  
}

#Calls the game1 function and checks for proportion of wins

proportion_win_game1 <- function() {
  wins <- 0
  gamecounter <- 1
  
  #looping and checking the first element of the game for 1
  
  while (gamecounter <= 100000) {
    if (play_game1()[1] == 1) {
      wins = wins + 1
    }
    
    gamecounter = gamecounter + 1
    
  }
  
  return (wins / 100000)
}

#This function calculates the expected winnings in game 1
expected_game1 <- function() {
  total_win <- 0
  gamecounter <- 1
  
  while (gamecounter <= 100000) {
    total_win = total_win + play_game1()[1]
    gamecounter = gamecounter + 1
  }
  
  return (total_win / 100000)
}

#This function plays the game 2 once and returns the winnings and numbers of bets
play_game2 <- function() {
  win_amount = sample(c(35, -1),
                      1,
                      replace = TRUE,
                      prob = c(1 / 37 , 36 / 37))
  
  #In game 1 the number of bets are constant for each game i.e 1
  
  number_of_bet <- 1
  
  return (c(win_amount, number_of_bet))
  
}

#Checking for proportion of wins for game 2
proportion_win_game2 <- function() {
  wins <- 0
  gamecounter <- 1
  
  #looping and checking the first element of the game for win amount == 35
  
  while (gamecounter <= 100000) {
    if (play_game2()[1] == 35) {
      wins = wins + 1
    }
    
    gamecounter = gamecounter + 1
    
  }
  
  return (wins / 100000)
  
}

#This function checks the expected winnings in game 2
expected_game2 <- function() {
  total_win <- 0
  gamecounter <- 1
  
  while (gamecounter <= 100000) {
    total_win = total_win + play_game2()[1]
    gamecounter = gamecounter + 1
  }
  
  return (total_win / 100000)
  
}

#This game plays the martindale system game once and returns the winning amount and number of bets played
play_game3 <- function() {
  win_amount <- 0
  number_bets <- 0
  bet_amount <- 1
  
  while (win_amount < 10 && bet_amount < 100) {
    current_winnings = play_game1()[1] 
    if (current_winnings == -1) {
      win_amount = win_amount - bet_amount
      bet_amount = bet_amount * 2
    }
    else{
      win_amount = win_amount + bet_amount
      bet_amount = 1
    }
    number_bets = number_bets + 1
  }
  
  return(c(win_amount, number_bets))
}

#This function returns the expected amount of winnings for game 3 when it's played for 100000 times 
expected_game3 <- function() {
  counter <- 1
  win_amount <- 0
  
  while (counter <= 100000) {
    win_amount = win_amount + play_game3()[1]
    counter = counter + 1
  }
  return (win_amount / 100000)
}

#This function calculates the proportion of wins for game 3
proportion_win_game3 <- function() {
  counter <- 1
  win_amount <- 0
  number_of_wins <- 0
  
  while (counter <= 100000) {
    win_amount = play_game3()[1]
    if (win_amount == 10) {
      number_of_wins = number_of_wins + 1
    }
    counter = counter + 1
  }
  
  return (number_of_wins / 100000)
}

#This function plays the lebouchere system of game and returns the win amount and number of bets
play_game4 <- function() {
  list_game = c(1, 2, 3, 4)
  win_amount <- 0
  bet_amount = list_game[1] + list_game[length(list_game)]
  number_bets <- 0
  
  while (length(list_game) >= 1 && bet_amount < 100) {
    current_winnings <-
      sample(
        c(-bet_amount, bet_amount),
        1,
        replace = T,
        prob = c(19 / 37, 18 / 37)
      )
    
    if (current_winnings > 0) {
      win_amount = win_amount + current_winnings
      list_game = list_game[-c(1, length(list_game))]
      
      if (length(list_game) == 1) {
        bet_amount <- list_game[1]
        
      }
      
      else {
        bet_amount <- list_game[1] + list_game[length(list_game)]
      }
      
    }
    
    else{
      win_amount = win_amount + current_winnings
      list_game = c(list_game, abs(current_winnings))
      bet_amount = list_game[1] + list_game[length(list_game)]
    }
    
    number_bets = number_bets + 1
    
  }
  
  return (c(win_amount, number_bets))
  
}

#This function returns the expected winnings of game 4
expected_game4 <- function() {
  counter <- 1
  win_amount <- 0
  
  while (counter <= 100000) {
    win_amount = win_amount + play_game4()[1]
    counter = counter + 1
  }
  return (win_amount / 100000)
  
}

#This function returns the proportion of wins
proportion_win_game4 <- function() {
  counter <- 1
  win_amount <- 0
  number_of_wins <- 0
  
  while (counter <= 100000) {
    win_amount = play_game4()[1]
    if (win_amount == 10) {
      number_of_wins = number_of_wins + 1
    }
    counter = counter + 1
  }
  
  return (number_of_wins / 100000)
}


#This function is calculating the required min-max values of expected winnings, playtime and winning proportions of game 1,2,3 and 4
table_1_stuff<-function(){
game1_expected_wins = replicate(5, expected_game1()[1])


game2_expected_wins = replicate(5, expected_game2()[1])


game3_expected_wins = replicate(5, expected_game3()[1])


game4_expected_wins = replicate(5, expected_game4()[1])



game1_propwins = replicate(5, proportion_win_game1())


game2_propwins = replicate(5, proportion_win_game2())


game3_propwins = replicate(5, proportion_win_game3())


game4_propwins = replicate(5, proportion_win_game4())


game1_playtime <- 1
game2_playtime <- 1
game3_playtime = replicate(5, play_game3()[2])


game4_playtime = replicate(5, play_game4()[2])



return (list(min(game1_expected_wins),max(game1_expected_wins)
             ,min(game2_expected_wins),max(game2_expected_wins)
             ,min(game3_expected_wins)
             ,max(game3_expected_wins),min(game4_expected_wins)
             ,max(game4_expected_wins),min(game1_propwins)
             ,max(game1_propwins),min(game2_propwins)
             ,max(game2_propwins),min(game3_propwins),max(game3_propwins)
             ,min(game4_propwins)
             ,max(game4_propwins),min(game1_playtime)
             ,max(game1_playtime),min(game2_playtime)
             ,max(game2_playtime),min(game3_playtime)
             ,max(game3_playtime),min(game4_playtime)
             ,max(game4_playtime)))

}

game1_wins <- function() {
  g1 <- replicate(100000, play_game1()[1])
  
  return(list(mean(g1), sd(g1)))
}

game2_wins <- function() {
  g2 <- replicate(100000, play_game2()[1])
  
  return(list(mean(g2), sd(g2)))
}

game3_wins <- function() {
  g3 <- replicate(100000, play_game3()[1])
  
  return(list(mean(g3), sd(g3)))
}

game4_wins <- function() {
  g4 <- replicate(100000, play_game4()[1])
  
  return(list(mean(g4), sd(g4)))
}

prop1_wins <- function() {
  g1 <- replicate(100000, proportion_win_game1())
  
  return(list(mean(g1), sd(g1)))
}

prop2_wins <- function() {
  g2 <- replicate(100000, proportion_win_game2())
  
  return(list(mean(g2), sd(g2)))
}

prop3_wins <- function() {
  g3 <- replicate(100000, proportion_win_game3())
  
  return(list(mean(g3), sd(g3)))
}

prop4_wins <- function() {
  g4 <- replicate(100000, proportion_win_game4())
  
  return(list(mean(g4), sd(g4)))
}

playtime_Game3 <- function() {
  x = replicate(100000, play_game3()[2])
  return(list(mean(x), sd(x)))
}

playtime_Game4 <- function() {
  x = replicate(100000, play_game4()[2])
  return(list(mean(x), mean(y)))
  
}
